import "../styles/globals.scss";
import type { AppProps } from "next/app";
import Head from "next/head";
import { PersistGate } from "redux-persist/integration/react";
import store, { persistStorage } from "../store";
import { Provider } from "react-redux";
import React, { ReactElement, ReactNode, useEffect, useState } from "react";
require("@solana/wallet-adapter-react-ui/styles.css");
import AutoConnectWalletProvider from "../contexts/AutoConnectWalletContext";
import { NextPage } from "next";
import { useRouter } from "next/router";
import { message, Spin } from "antd";
import { useConnection } from "@solana/wallet-adapter-react";
import { useMemo } from "react";
import Cookies from "js-cookie";
import { PublicKey } from "@solana/web3.js";

export type NextPageWithLayout<P = {}, IP = P> = NextPage<P, IP> & {
  getLayout?: (page: ReactElement) => ReactNode;
};

type AppPropsWithLayout = AppProps & {
  Component: NextPageWithLayout;
};

const Loading = () => {
  const router = useRouter();
  const [loading, setLoading] = useState(false);

  useEffect(() => {
    const handleStart = (url: string) => {
      return setLoading(true);
    };
    const handleComplete = (url: string) => {
      setLoading(false);
    };

    router.events.on("routeChangeStart", handleStart);
    router.events.on("routeChangeComplete", handleComplete);
    router.events.on("routeChangeError", handleComplete);
    return () => {
      router.events.off("routeChangeStart", handleStart);
      router.events.off("routeChangeComplete", handleComplete);
      router.events.off("routeChangeError", handleComplete);
    };
  });

  return loading ? (
    <div
      style={{
        position: "fixed",
        height: "100vh",
        width: "100%",
        zIndex: 100,
        display: "flex",
        justifyContent: "center",
        alignItems: "center",
        backgroundColor: "#ffffff96",
      }}
    >
      <div>
        <Spin size="large" />
      </div>
    </div>
  ) : (
    <></>
  );
};

export default function App({ Component, pageProps }: AppPropsWithLayout) {
  const router = useRouter();
  // Use the layout defined at the page level, if available
  const getLayout = Component.getLayout ?? ((page) => page);
  const connection = useConnection();

  const getProvider = () => {
    if (typeof window === "undefined") return;
    if ("phantom" in window) {
      const provider = window.phantom?.solana;

      if (provider?.isPhantom) {
        return provider;
      }
    }
  };

  const provider = getProvider();

  if (provider) {
    provider.on("accountChanged", () => {
      const accessToken = Cookies.get("accessToken");
      const path = window.location.pathname;
      console.log("path: ", window.location.pathname);
      if (!accessToken) return;
      if (path === "/connect-wallet" || path === "/unmatched-wallet") return;
      Cookies.remove("accessToken");
      Cookies.remove("walletAddress");
      router.push("/login");
    });
  }

  return (
    <>
      <Head>
        <title>Solana Coding Camp</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <AutoConnectWalletProvider>
        <Provider store={store}>
          <PersistGate loading={null} persistor={persistStorage}>
            <Loading />
            {getLayout(<Component {...pageProps} />)}
          </PersistGate>
        </Provider>
      </AutoConnectWalletProvider>
    </>
  );
}
